snippet noop "no operation"
() => {}
endsnippet

snippet identity "identity function"
x => x
endsnippet

snippet todo "this is a todo reminder"
// TODO: ${1:desc} `!v strftime("%c")`
endsnippet

snippet crh "create react hook template"
import React, { useState, useEffect } from 'react';

const ${1:hook} = () => {
	const [value, setValue] = useState(0)
	return (
		<div />
  );
}

export default $1

endsnippet

snippet crc "create react es6 class template"
import React, { Component } from 'react';
import PropTypes from 'prop-types';

export default class ${1:ClassName} extends Component {
	constructor(props){
		super(props);
	}

	static propTypes = {

	}

	render() {
		return (
			<div>
			</div>
		);
	}
}
endsnippet

snippet crf "create react es6 stateless template"
import React from 'react';
import PropTypes from 'prop-types';

const ${1:ClassName} = ({ }) => (
	<div>
	</div>
);

$1.propTypes = {

}

export default $1;
endsnippet

snippet crd "create react es6 jest describe template"
import React from 'react';
import ${1:Component} from '../$1';
import { render, fireEvent, cleanup } from '@testing-library/react';

afterEach(cleanup);

describe('$1', () => {
	const defaultProps = {

	};

	const returnWrapper = (props = defaultProps) =>
		render(<$1 {...props} />);

	it('${2:TestName}', () => {
			const { asFragment } = returnWrapper();
			expect(asFragment()).toMatchSnapshot();
	});
});
endsnippet

snippet crt "create react es6 jest test template"
it('${1:TestName}', () => {

});
endsnippet

snippet rus "react use state"
const [$1, set${1/\w+\s*/\u$0/}] = useState($2);
endsnippet

snippet rue "react use effect"
useEffect(() => {

}, []);
endsnippet

snippet crg "create request get"
import request from 'superagent';

const [value, setValue] = useState({});

useEffect(() => {
	request
		.get("$1")
		.set({ Accept: 'application/json' })
		.end((err, resp) => {
			if (!err) {
				setValue(resp.body);
			}
		});
}, [dep1, /* ...depN */]);
endsnippet

snippet crp "create request post"
import request from 'superagent';

useEffect(() => {
	request
		.post("$1")
		.send({ ...model })
		.set({ Accept: 'application/json' })
		.end(err => {
			if (!err) {
			}
	});
}, [dep1, /* ...depN */]);
endsnippet

snippet mrg "mock request get using jest"
import request from 'superagent';

request.get = jest.fn(url => {
	expect(url).toBe('');
	return {
			set: header => {
				expect(JSON.stringify(header)).toBe('{\"Accept\":\"application/json\"}');
				return {
						end: cb => cb(null, { body })
				}
			}
  }
});
endsnippet

snippet mrp "mock request post using jest"
import request from 'superagent';

request.post = jest.fn(url => {
  expect(url).toBe('');
  return {
      send: payload => {
					// example payload to test
          expect(payload.planId).toBe("19072b3d-ccff-4598-bb64-ab1800d4bfd5");
          expect(payload.year).toBe("2020");
          expect(payload.carrierId).toBe("dc7a7806-ee60-434f-9402-ab1800d4bdf5");
          expect(payload.rates.length).toBe(1);
          return {
            set: header => {
              expect(JSON.stringify(header)).toBe('{\"Accept\":\"application/json\"}');
            return {
							end: cb => cb()
          }
        }
      }
    }
  }
});
endsnippet
